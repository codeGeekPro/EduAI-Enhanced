#!/bin/bash

# üõ°Ô∏è Script de Test de l'Infrastructure de S√©curit√©
# Valide tous les services de s√©curit√© mis en place

echo "üõ°Ô∏è D√©marrage des tests de s√©curit√© EduAI-Enhanced..."

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Compteurs de tests
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

# Fonction pour afficher le r√©sultat d'un test
print_test_result() {
    local test_name="$1"
    local result="$2"
    local details="$3"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    
    if [ "$result" = "PASS" ]; then
        echo -e "${GREEN}‚úÖ PASS${NC} - $test_name"
        [ -n "$details" ] && echo -e "   ${BLUE}‚ÑπÔ∏è  $details${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
    else
        echo -e "${RED}‚ùå FAIL${NC} - $test_name"
        [ -n "$details" ] && echo -e "   ${RED}‚ö†Ô∏è  $details${NC}"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    fi
}

# Fonction pour v√©rifier l'existence d'un fichier
check_file_exists() {
    local file_path="$1"
    local description="$2"
    
    if [ -f "$file_path" ]; then
        print_test_result "$description" "PASS" "Fichier trouv√©: $file_path"
    else
        print_test_result "$description" "FAIL" "Fichier manquant: $file_path"
    fi
}

# Fonction pour v√©rifier le contenu d'un fichier
check_file_content() {
    local file_path="$1"
    local pattern="$2"
    local description="$3"
    
    if [ -f "$file_path" ] && grep -q "$pattern" "$file_path"; then
        print_test_result "$description" "PASS" "Pattern trouv√© dans $file_path"
    else
        print_test_result "$description" "FAIL" "Pattern '$pattern' non trouv√© dans $file_path"
    fi
}

echo -e "\n${BLUE}üìÇ V√©rification de l'architecture des fichiers de s√©curit√©...${NC}"

# Test 1: V√©rification des services de s√©curit√©
check_file_exists "frontend/src/services/AuthService.ts" "Service d'authentification OAuth2/JWT"
check_file_exists "frontend/src/services/RateLimitingService.ts" "Service de limitation de taux"
check_file_exists "frontend/src/services/ValidationService.ts" "Service de validation multimodale"
check_file_exists "frontend/src/services/EncryptionService.ts" "Service de chiffrement AES-256-GCM"
check_file_exists "frontend/src/services/SecurityIntegrationService.ts" "Service d'int√©gration de s√©curit√©"

# Test 2: V√©rification du tableau de bord de s√©curit√©
check_file_exists "frontend/src/components/SecurityDashboard.tsx" "Tableau de bord de s√©curit√©"

echo -e "\n${BLUE}üîç V√©rification du contenu des services...${NC}"

# Test 3: Contenu du service d'authentification
check_file_content "frontend/src/services/AuthService.ts" "OAuth2" "OAuth2 pr√©sent dans AuthService"
check_file_content "frontend/src/services/AuthService.ts" "JWT" "JWT pr√©sent dans AuthService"
check_file_content "frontend/src/services/AuthService.ts" "MFA" "MFA (Multi-Factor Auth) pr√©sent"
check_file_content "frontend/src/services/AuthService.ts" "PKCE" "PKCE (Code Challenge) pr√©sent"

# Test 4: Contenu du service de rate limiting
check_file_content "frontend/src/services/RateLimitingService.ts" "slidingWindow" "Algorithme Sliding Window pr√©sent"
check_file_content "frontend/src/services/RateLimitingService.ts" "tokenBucket" "Algorithme Token Bucket pr√©sent"
check_file_content "frontend/src/services/RateLimitingService.ts" "leakyBucket" "Algorithme Leaky Bucket pr√©sent"
check_file_content "frontend/src/services/RateLimitingService.ts" "adaptive" "Algorithme adaptatif pr√©sent"

# Test 5: Contenu du service de validation
check_file_content "frontend/src/services/ValidationService.ts" "validateText" "Validation de texte pr√©sente"
check_file_content "frontend/src/services/ValidationService.ts" "validateImage" "Validation d'image pr√©sente"
check_file_content "frontend/src/services/ValidationService.ts" "validateAudio" "Validation d'audio pr√©sente"
check_file_content "frontend/src/services/ValidationService.ts" "validateVideo" "Validation de vid√©o pr√©sente"

# Test 6: Contenu du service de chiffrement
check_file_content "frontend/src/services/EncryptionService.ts" "AES-256-GCM" "Algorithme AES-256-GCM pr√©sent"
check_file_content "frontend/src/services/EncryptionService.ts" "encryptUserData" "Chiffrement donn√©es utilisateur pr√©sent"
check_file_content "frontend/src/services/EncryptionService.ts" "encryptAPIKey" "Chiffrement cl√©s API pr√©sent"
check_file_content "frontend/src/services/EncryptionService.ts" "keyRotation" "Rotation des cl√©s pr√©sente"

# Test 7: Int√©gration dans le dashboard principal
check_file_content "frontend/src/components/EnhancedDashboard.tsx" "SecurityDashboard" "SecurityDashboard int√©gr√© au dashboard principal"
check_file_content "frontend/src/components/EnhancedDashboard.tsx" "security.*S√©curit√©" "Onglet s√©curit√© ajout√©"

echo -e "\n${BLUE}üîß V√©rification de la structure TypeScript...${NC}"

# Test 8: Compilation TypeScript (si tsc est disponible)
if command -v npx &> /dev/null && [ -f "frontend/tsconfig.json" ]; then
    echo "üîç Test de compilation TypeScript..."
    cd frontend
    if npx tsc --noEmit --project tsconfig.json 2>/dev/null; then
        print_test_result "Compilation TypeScript" "PASS" "Aucune erreur de type d√©tect√©e"
    else
        print_test_result "Compilation TypeScript" "FAIL" "Erreurs TypeScript d√©tect√©es - voir logs"
    fi
    cd ..
else
    print_test_result "Compilation TypeScript" "SKIP" "tsc non disponible ou tsconfig.json manquant"
fi

echo -e "\n${BLUE}üì¶ V√©rification des d√©pendances...${NC}"

# Test 9: V√©rification du package.json
if [ -f "frontend/package.json" ]; then
    if grep -q '"@types/' "frontend/package.json"; then
        print_test_result "Types TypeScript" "PASS" "Types TypeScript configur√©s"
    else
        print_test_result "Types TypeScript" "FAIL" "Types TypeScript manquants"
    fi
    
    if grep -q '"tailwindcss"' "frontend/package.json" || grep -q '"@tailwindcss/' "frontend/package.json"; then
        print_test_result "Tailwind CSS" "PASS" "Tailwind CSS configur√©"
    else
        print_test_result "Tailwind CSS" "FAIL" "Tailwind CSS manquant"
    fi
else
    print_test_result "Package.json Frontend" "FAIL" "frontend/package.json non trouv√©"
fi

echo -e "\n${BLUE}üõ°Ô∏è Tests de s√©curit√© sp√©cifiques...${NC}"

# Test 10: V√©rification des m√©canismes de s√©curit√©
check_file_content "frontend/src/services/SecurityIntegrationService.ts" "secureRequest" "Requ√™tes s√©curis√©es impl√©ment√©es"
check_file_content "frontend/src/services/SecurityIntegrationService.ts" "checkAuthentication" "V√©rification d'authentification pr√©sente"
check_file_content "frontend/src/services/SecurityIntegrationService.ts" "checkRateLimit" "V√©rification rate limiting pr√©sente"
check_file_content "frontend/src/services/SecurityIntegrationService.ts" "validateContent" "Validation de contenu pr√©sente"

# Test 11: V√©rification des patterns de s√©curit√©
check_file_content "frontend/src/services/AuthService.ts" "SecurityEvent" "√âv√©nements de s√©curit√© d√©finis"
check_file_content "frontend/src/services/RateLimitingService.ts" "getSystemLoad" "Monitoring charge syst√®me pr√©sent"
check_file_content "frontend/src/services/EncryptionService.ts" "DataClassification" "Classification des donn√©es pr√©sente"

echo -e "\n${BLUE}üìä V√©rification de l'int√©gration monitoring...${NC}"

# Test 12: Int√©gration avec le monitoring IA
check_file_content "frontend/src/services/AuthService.ts" "aiMetrics" "Int√©gration monitoring IA dans AuthService"
check_file_content "frontend/src/services/RateLimitingService.ts" "aiMetrics" "Int√©gration monitoring IA dans RateLimitingService"
check_file_content "frontend/src/services/ValidationService.ts" "aiMetrics" "Int√©gration monitoring IA dans ValidationService"
check_file_content "frontend/src/services/EncryptionService.ts" "aiMetrics" "Int√©gration monitoring IA dans EncryptionService"

echo -e "\n${BLUE}üé® V√©rification de l'interface utilisateur...${NC}"

# Test 13: Interface du tableau de bord de s√©curit√©
check_file_content "frontend/src/components/SecurityDashboard.tsx" "activeTab" "Navigation par onglets pr√©sente"
check_file_content "frontend/src/components/SecurityDashboard.tsx" "overview.*auth.*rate-limit.*validation.*encryption" "Tous les onglets de s√©curit√© pr√©sents"
check_file_content "frontend/src/components/SecurityDashboard.tsx" "securityOverview" "Vue d'ensemble de s√©curit√© impl√©ment√©e"

# Test 14: Responsive design et accessibilit√©
check_file_content "frontend/src/components/SecurityDashboard.tsx" "md:grid-cols" "Design responsive impl√©ment√©"
check_file_content "frontend/src/components/SecurityDashboard.tsx" "bg-.*text-.*rounded" "Classes Tailwind CSS utilis√©es"

echo -e "\n${BLUE}üîó V√©rification de l'int√©gration globale...${NC}"

# Test 15: Int√©gration compl√®te
if [ -f "frontend/src/services/SecurityIntegrationService.ts" ] && [ -f "frontend/src/components/SecurityDashboard.tsx" ] && [ -f "frontend/src/components/EnhancedDashboard.tsx" ]; then
    if grep -q "SecurityDashboard" "frontend/src/components/EnhancedDashboard.tsx"; then
        print_test_result "Int√©gration compl√®te" "PASS" "Tous les composants de s√©curit√© int√©gr√©s"
    else
        print_test_result "Int√©gration compl√®te" "FAIL" "SecurityDashboard non int√©gr√© dans EnhancedDashboard"
    fi
else
    print_test_result "Int√©gration compl√®te" "FAIL" "Composants manquants pour l'int√©gration"
fi

echo -e "\n${YELLOW}üìã R√©sum√© des tests de s√©curit√©${NC}"
echo "=================================="
echo -e "Total des tests: ${BLUE}$TOTAL_TESTS${NC}"
echo -e "Tests r√©ussis:   ${GREEN}$PASSED_TESTS${NC}"
echo -e "Tests √©chou√©s:   ${RED}$FAILED_TESTS${NC}"

# Calcul du pourcentage de r√©ussite
if [ $TOTAL_TESTS -gt 0 ]; then
    SUCCESS_RATE=$((PASSED_TESTS * 100 / TOTAL_TESTS))
    echo -e "Taux de r√©ussite: ${BLUE}$SUCCESS_RATE%${NC}"
    
    if [ $SUCCESS_RATE -ge 90 ]; then
        echo -e "\n${GREEN}üéâ Excellent! Infrastructure de s√©curit√© tr√®s bien impl√©ment√©e.${NC}"
    elif [ $SUCCESS_RATE -ge 75 ]; then
        echo -e "\n${YELLOW}üëç Bon travail! Quelques am√©liorations mineures possibles.${NC}"
    elif [ $SUCCESS_RATE -ge 50 ]; then
        echo -e "\n${YELLOW}‚ö†Ô∏è  Infrastructure partiellement impl√©ment√©e. Corrections n√©cessaires.${NC}"
    else
        echo -e "\n${RED}‚ùå Infrastructure de s√©curit√© n√©cessite des am√©liorations importantes.${NC}"
    fi
else
    echo -e "\n${RED}‚ùå Aucun test n'a pu √™tre ex√©cut√©.${NC}"
fi

echo -e "\n${BLUE}üöÄ √âtapes suivantes recommand√©es:${NC}"
echo "1. üîß Corriger les erreurs TypeScript restantes"
echo "2. üß™ Ajouter des tests unitaires pour chaque service"
echo "3. üîí Configurer les variables d'environnement de s√©curit√©"
echo "4. üìö Compl√©ter la documentation de s√©curit√©"
echo "5. üöÄ D√©ployer en environnement de test s√©curis√©"

echo -e "\n${GREEN}‚úÖ Tests de s√©curit√© termin√©s!${NC}"

# Code de sortie bas√© sur le taux de r√©ussite
if [ $SUCCESS_RATE -ge 75 ]; then
    exit 0
else
    exit 1
fi
